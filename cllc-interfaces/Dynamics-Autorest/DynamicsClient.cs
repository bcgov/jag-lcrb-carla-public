// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// This OData service is located at http://localhost
    /// </summary>
    public partial class DynamicsClient : ServiceClient<DynamicsClient>, IDynamicsClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Show only the first n items
        /// </summary>
        public int? Top { get; set; }

        /// <summary>
        /// Skip the first n items
        /// </summary>
        public int? Skip { get; set; }

        /// <summary>
        /// Include count of items
        /// </summary>
        public bool? Count { get; set; }

        /// <summary>
        /// Filter items by property values
        /// </summary>
        public string Filter { get; set; }

        /// <summary>
        /// Search items by search phrases
        /// </summary>
        public string Search { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IAccounts.
        /// </summary>
        public virtual IAccounts Accounts { get; private set; }

        /// <summary>
        /// Gets the IAdditionalinspectors.
        /// </summary>
        public virtual IAdditionalinspectors Additionalinspectors { get; private set; }

        /// <summary>
        /// Gets the IAdminactivities.
        /// </summary>
        public virtual IAdminactivities Adminactivities { get; private set; }

        /// <summary>
        /// Gets the IAdoxiolicencetypeadoxioinvestigationset.
        /// </summary>
        public virtual IAdoxiolicencetypeadoxioinvestigationset Adoxiolicencetypeadoxioinvestigationset { get; private set; }

        /// <summary>
        /// Gets the IAliases.
        /// </summary>
        public virtual IAliases Aliases { get; private set; }

        /// <summary>
        /// Gets the IAnnualvolumes.
        /// </summary>
        public virtual IAnnualvolumes Annualvolumes { get; private set; }

        /// <summary>
        /// Gets the IApplicationbpfdormancies.
        /// </summary>
        public virtual IApplicationbpfdormancies Applicationbpfdormancies { get; private set; }

        /// <summary>
        /// Gets the IApplicationbpfv3s.
        /// </summary>
        public virtual IApplicationbpfv3s Applicationbpfv3s { get; private set; }

        /// <summary>
        /// Gets the IApplicationcrsbpfv4s.
        /// </summary>
        public virtual IApplicationcrsbpfv4s Applicationcrsbpfv4s { get; private set; }

        /// <summary>
        /// Gets the IApplicationextensions.
        /// </summary>
        public virtual IApplicationextensions Applicationextensions { get; private set; }

        /// <summary>
        /// Gets the IApplicationinvoicehistories.
        /// </summary>
        public virtual IApplicationinvoicehistories Applicationinvoicehistories { get; private set; }

        /// <summary>
        /// Gets the IApplicationlicenseechangesv10s.
        /// </summary>
        public virtual IApplicationlicenseechangesv10s Applicationlicenseechangesv10s { get; private set; }

        /// <summary>
        /// Gets the IApplicationliquorbpfv2s.
        /// </summary>
        public virtual IApplicationliquorbpfv2s Applicationliquorbpfv2s { get; private set; }

        /// <summary>
        /// Gets the IApplicationrelocationv1s.
        /// </summary>
        public virtual IApplicationrelocationv1s Applicationrelocationv1s { get; private set; }

        /// <summary>
        /// Gets the IApplications.
        /// </summary>
        public virtual IApplications Applications { get; private set; }

        /// <summary>
        /// Gets the IApplicationstructurechangev1s.
        /// </summary>
        public virtual IApplicationstructurechangev1s Applicationstructurechangev1s { get; private set; }

        /// <summary>
        /// Gets the IApplicationtermsconditionslimitations.
        /// </summary>
        public virtual IApplicationtermsconditionslimitations Applicationtermsconditionslimitations { get; private set; }

        /// <summary>
        /// Gets the IApplicationtransferownershipv1s.
        /// </summary>
        public virtual IApplicationtransferownershipv1s Applicationtransferownershipv1s { get; private set; }

        /// <summary>
        /// Gets the IApplicationtypecontents.
        /// </summary>
        public virtual IApplicationtypecontents Applicationtypecontents { get; private set; }

        /// <summary>
        /// Gets the IApplicationtypefeeschedules.
        /// </summary>
        public virtual IApplicationtypefeeschedules Applicationtypefeeschedules { get; private set; }

        /// <summary>
        /// Gets the IApplicationtypes.
        /// </summary>
        public virtual IApplicationtypes Applicationtypes { get; private set; }

        /// <summary>
        /// Gets the IApplicenseechangebpfv2s.
        /// </summary>
        public virtual IApplicenseechangebpfv2s Applicenseechangebpfv2s { get; private set; }

        /// <summary>
        /// Gets the IAreas.
        /// </summary>
        public virtual IAreas Areas { get; private set; }

        /// <summary>
        /// Gets the IAssignmenthistories.
        /// </summary>
        public virtual IAssignmenthistories Assignmenthistories { get; private set; }

        /// <summary>
        /// Gets the IAuctionpermits.
        /// </summary>
        public virtual IAuctionpermits Auctionpermits { get; private set; }

        /// <summary>
        /// Gets the IAuctionpermitschedules.
        /// </summary>
        public virtual IAuctionpermitschedules Auctionpermitschedules { get; private set; }

        /// <summary>
        /// Gets the IAuditlogrequests.
        /// </summary>
        public virtual IAuditlogrequests Auditlogrequests { get; private set; }

        /// <summary>
        /// Gets the IBusinessaccounts.
        /// </summary>
        public virtual IBusinessaccounts Businessaccounts { get; private set; }

        /// <summary>
        /// Gets the ICannabisinventoryreports.
        /// </summary>
        public virtual ICannabisinventoryreports Cannabisinventoryreports { get; private set; }

        /// <summary>
        /// Gets the ICannabismonthlyreports.
        /// </summary>
        public virtual ICannabismonthlyreports Cannabismonthlyreports { get; private set; }

        /// <summary>
        /// Gets the ICannabisproductadmins.
        /// </summary>
        public virtual ICannabisproductadmins Cannabisproductadmins { get; private set; }

        /// <summary>
        /// Gets the ICeprojects.
        /// </summary>
        public virtual ICeprojects Ceprojects { get; private set; }

        /// <summary>
        /// Gets the ICitydistricts.
        /// </summary>
        public virtual ICitydistricts Citydistricts { get; private set; }

        /// <summary>
        /// Gets the IComplaints.
        /// </summary>
        public virtual IComplaints Complaints { get; private set; }

        /// <summary>
        /// Gets the IComplianceinvestigations.
        /// </summary>
        public virtual IComplianceinvestigations Complianceinvestigations { get; private set; }

        /// <summary>
        /// Gets the ICompliancemeetings.
        /// </summary>
        public virtual ICompliancemeetings Compliancemeetings { get; private set; }

        /// <summary>
        /// Gets the IContraventionadmins.
        /// </summary>
        public virtual IContraventionadmins Contraventionadmins { get; private set; }

        /// <summary>
        /// Gets the IContraventions.
        /// </summary>
        public virtual IContraventions Contraventions { get; private set; }

        /// <summary>
        /// Gets the ICorporatehistorysummaries.
        /// </summary>
        public virtual ICorporatehistorysummaries Corporatehistorysummaries { get; private set; }

        /// <summary>
        /// Gets the ICorporateroles.
        /// </summary>
        public virtual ICorporateroles Corporateroles { get; private set; }

        /// <summary>
        /// Gets the ICourthouselocations.
        /// </summary>
        public virtual ICourthouselocations Courthouselocations { get; private set; }

        /// <summary>
        /// Gets the ICustomautonumberdefinitions.
        /// </summary>
        public virtual ICustomautonumberdefinitions Customautonumberdefinitions { get; private set; }

        /// <summary>
        /// Gets the ICustomautonumberrequests.
        /// </summary>
        public virtual ICustomautonumberrequests Customautonumberrequests { get; private set; }

        /// <summary>
        /// Gets the IDocumentadmins.
        /// </summary>
        public virtual IDocumentadmins Documentadmins { get; private set; }

        /// <summary>
        /// Gets the IDocuments.
        /// </summary>
        public virtual IDocuments Documents { get; private set; }

        /// <summary>
        /// Gets the IEndorsements.
        /// </summary>
        public virtual IEndorsements Endorsements { get; private set; }

        /// <summary>
        /// Gets the IEnforcementactionbpfs.
        /// </summary>
        public virtual IEnforcementactionbpfs Enforcementactionbpfs { get; private set; }

        /// <summary>
        /// Gets the IEnforcementactions.
        /// </summary>
        public virtual IEnforcementactions Enforcementactions { get; private set; }

        /// <summary>
        /// Gets the IEstablishmentincidents.
        /// </summary>
        public virtual IEstablishmentincidents Establishmentincidents { get; private set; }

        /// <summary>
        /// Gets the IEstablishments.
        /// </summary>
        public virtual IEstablishments Establishments { get; private set; }

        /// <summary>
        /// Gets the IEstablishmentwatchwords.
        /// </summary>
        public virtual IEstablishmentwatchwords Establishmentwatchwords { get; private set; }

        /// <summary>
        /// Gets the IEventaddresses.
        /// </summary>
        public virtual IEventaddresses Eventaddresses { get; private set; }

        /// <summary>
        /// Gets the IEventlocations.
        /// </summary>
        public virtual IEventlocations Eventlocations { get; private set; }

        /// <summary>
        /// Gets the IEvents.
        /// </summary>
        public virtual IEvents Events { get; private set; }

        /// <summary>
        /// Gets the IEventschedules.
        /// </summary>
        public virtual IEventschedules Eventschedules { get; private set; }

        /// <summary>
        /// Gets the IExhibits.
        /// </summary>
        public virtual IExhibits Exhibits { get; private set; }

        /// <summary>
        /// Gets the IExternalcontactadoxioexternalprofileset.
        /// </summary>
        public virtual IExternalcontactadoxioexternalprofileset Externalcontactadoxioexternalprofileset { get; private set; }

        /// <summary>
        /// Gets the IExternalcontacts.
        /// </summary>
        public virtual IExternalcontacts Externalcontacts { get; private set; }

        /// <summary>
        /// Gets the IExternalprofiles.
        /// </summary>
        public virtual IExternalprofiles Externalprofiles { get; private set; }

        /// <summary>
        /// Gets the IFederalreportexports.
        /// </summary>
        public virtual IFederalreportexports Federalreportexports { get; private set; }

        /// <summary>
        /// Gets the IFiainvestigationlogs.
        /// </summary>
        public virtual IFiainvestigationlogs Fiainvestigationlogs { get; private set; }

        /// <summary>
        /// Gets the IFormelementuploadfields.
        /// </summary>
        public virtual IFormelementuploadfields Formelementuploadfields { get; private set; }

        /// <summary>
        /// Gets the IFundingsources.
        /// </summary>
        public virtual IFundingsources Fundingsources { get; private set; }

        /// <summary>
        /// Gets the IHoursofservices.
        /// </summary>
        public virtual IHoursofservices Hoursofservices { get; private set; }

        /// <summary>
        /// Gets the IHoursofservicesdefaults.
        /// </summary>
        public virtual IHoursofservicesdefaults Hoursofservicesdefaults { get; private set; }

        /// <summary>
        /// Gets the IImportedoutstandinginvoiceses.
        /// </summary>
        public virtual IImportedoutstandinginvoiceses Importedoutstandinginvoiceses { get; private set; }

        /// <summary>
        /// Gets the IIncidentadoxiolicencetypeset.
        /// </summary>
        public virtual IIncidentadoxiolicencetypeset Incidentadoxiolicencetypeset { get; private set; }

        /// <summary>
        /// Gets the IInspectioninspectorsset.
        /// </summary>
        public virtual IInspectioninspectorsset Inspectioninspectorsset { get; private set; }

        /// <summary>
        /// Gets the IInspectionformconfigurations.
        /// </summary>
        public virtual IInspectionformconfigurations Inspectionformconfigurations { get; private set; }

        /// <summary>
        /// Gets the IInspectionreactivationhistories.
        /// </summary>
        public virtual IInspectionreactivationhistories Inspectionreactivationhistories { get; private set; }

        /// <summary>
        /// Gets the IInspectorcommentsrollups.
        /// </summary>
        public virtual IInspectorcommentsrollups Inspectorcommentsrollups { get; private set; }

        /// <summary>
        /// Gets the IInspectorreports.
        /// </summary>
        public virtual IInspectorreports Inspectorreports { get; private set; }

        /// <summary>
        /// Gets the IInterests.
        /// </summary>
        public virtual IInterests Interests { get; private set; }

        /// <summary>
        /// Gets the IInvestigationactivities.
        /// </summary>
        public virtual IInvestigationactivities Investigationactivities { get; private set; }

        /// <summary>
        /// Gets the IInvestigationcontacts.
        /// </summary>
        public virtual IInvestigationcontacts Investigationcontacts { get; private set; }

        /// <summary>
        /// Gets the IInvestigationreactivationhistories.
        /// </summary>
        public virtual IInvestigationreactivationhistories Investigationreactivationhistories { get; private set; }

        /// <summary>
        /// Gets the IInvestigationrequests.
        /// </summary>
        public virtual IInvestigationrequests Investigationrequests { get; private set; }

        /// <summary>
        /// Gets the IInvestigations.
        /// </summary>
        public virtual IInvestigations Investigations { get; private set; }

        /// <summary>
        /// Gets the IInvestigationsubjects.
        /// </summary>
        public virtual IInvestigationsubjects Investigationsubjects { get; private set; }

        /// <summary>
        /// Gets the ILdborders.
        /// </summary>
        public virtual ILdborders Ldborders { get; private set; }

        /// <summary>
        /// Gets the ILeconnections.
        /// </summary>
        public virtual ILeconnections Leconnections { get; private set; }

        /// <summary>
        /// Gets the ILegalentities.
        /// </summary>
        public virtual ILegalentities Legalentities { get; private set; }

        /// <summary>
        /// Gets the ILicenceldbordertotalhistories.
        /// </summary>
        public virtual ILicenceldbordertotalhistories Licenceldbordertotalhistories { get; private set; }

        /// <summary>
        /// Gets the ILicenceses.
        /// </summary>
        public virtual ILicenceses Licenceses { get; private set; }

        /// <summary>
        /// Gets the ILicencesubcategories.
        /// </summary>
        public virtual ILicencesubcategories Licencesubcategories { get; private set; }

        /// <summary>
        /// Gets the ILicencetypes.
        /// </summary>
        public virtual ILicencetypes Licencetypes { get; private set; }

        /// <summary>
        /// Gets the ILicencetypesapplicationtypesset.
        /// </summary>
        public virtual ILicencetypesapplicationtypesset Licencetypesapplicationtypesset { get; private set; }

        /// <summary>
        /// Gets the ILicenseechangelogs.
        /// </summary>
        public virtual ILicenseechangelogs Licenseechangelogs { get; private set; }

        /// <summary>
        /// Gets the IListadoxioexternalcontactset.
        /// </summary>
        public virtual IListadoxioexternalcontactset Listadoxioexternalcontactset { get; private set; }

        /// <summary>
        /// Gets the ILoans.
        /// </summary>
        public virtual ILoans Loans { get; private set; }

        /// <summary>
        /// Gets the ILocalgovindigenousnations.
        /// </summary>
        public virtual ILocalgovindigenousnations Localgovindigenousnations { get; private set; }

        /// <summary>
        /// Gets the ILogins.
        /// </summary>
        public virtual ILogins Logins { get; private set; }

        /// <summary>
        /// Gets the ILqrlicencetransferbpfs.
        /// </summary>
        public virtual ILqrlicencetransferbpfs Lqrlicencetransferbpfs { get; private set; }

        /// <summary>
        /// Gets the IOffsitestorages.
        /// </summary>
        public virtual IOffsitestorages Offsitestorages { get; private set; }

        /// <summary>
        /// Gets the IOnestopmessageitems.
        /// </summary>
        public virtual IOnestopmessageitems Onestopmessageitems { get; private set; }

        /// <summary>
        /// Gets the IPersonalhistorysummaries.
        /// </summary>
        public virtual IPersonalhistorysummaries Personalhistorysummaries { get; private set; }

        /// <summary>
        /// Gets the IPmuareas.
        /// </summary>
        public virtual IPmuareas Pmuareas { get; private set; }

        /// <summary>
        /// Gets the IPolicejurisdictions.
        /// </summary>
        public virtual IPolicejurisdictions Policejurisdictions { get; private set; }

        /// <summary>
        /// Gets the IPolicydocuments.
        /// </summary>
        public virtual IPolicydocuments Policydocuments { get; private set; }

        /// <summary>
        /// Gets the IPostalcodes.
        /// </summary>
        public virtual IPostalcodes Postalcodes { get; private set; }

        /// <summary>
        /// Gets the IPreviousaddresses.
        /// </summary>
        public virtual IPreviousaddresses Previousaddresses { get; private set; }

        /// <summary>
        /// Gets the IProratedlicencefeeschedules.
        /// </summary>
        public virtual IProratedlicencefeeschedules Proratedlicencefeeschedules { get; private set; }

        /// <summary>
        /// Gets the IRegions.
        /// </summary>
        public virtual IRegions Regions { get; private set; }

        /// <summary>
        /// Gets the IRelatedlicences.
        /// </summary>
        public virtual IRelatedlicences Relatedlicences { get; private set; }

        /// <summary>
        /// Gets the IRelatedparties.
        /// </summary>
        public virtual IRelatedparties Relatedparties { get; private set; }

        /// <summary>
        /// Gets the IRmreviews.
        /// </summary>
        public virtual IRmreviews Rmreviews { get; private set; }

        /// <summary>
        /// Gets the ISepcities.
        /// </summary>
        public virtual ISepcities Sepcities { get; private set; }

        /// <summary>
        /// Gets the ISepdrinksalesforecasts.
        /// </summary>
        public virtual ISepdrinksalesforecasts Sepdrinksalesforecasts { get; private set; }

        /// <summary>
        /// Gets the ISepdrinktypes.
        /// </summary>
        public virtual ISepdrinktypes Sepdrinktypes { get; private set; }

        /// <summary>
        /// Gets the ISepinvoicehistories.
        /// </summary>
        public virtual ISepinvoicehistories Sepinvoicehistories { get; private set; }

        /// <summary>
        /// Gets the IServiceareas.
        /// </summary>
        public virtual IServiceareas Serviceareas { get; private set; }

        /// <summary>
        /// Gets the ISettings.
        /// </summary>
        public virtual ISettings Settings { get; private set; }

        /// <summary>
        /// Gets the ISpddatarows.
        /// </summary>
        public virtual ISpddatarows Spddatarows { get; private set; }

        /// <summary>
        /// Gets the ISpdexportses.
        /// </summary>
        public virtual ISpdexportses Spdexportses { get; private set; }

        /// <summary>
        /// Gets the ISpecialeventlicencedareas.
        /// </summary>
        public virtual ISpecialeventlicencedareas Specialeventlicencedareas { get; private set; }

        /// <summary>
        /// Gets the ISpecialeventlocations.
        /// </summary>
        public virtual ISpecialeventlocations Specialeventlocations { get; private set; }

        /// <summary>
        /// Gets the ISpecialeventnotes.
        /// </summary>
        public virtual ISpecialeventnotes Specialeventnotes { get; private set; }

        /// <summary>
        /// Gets the ISpecialevents.
        /// </summary>
        public virtual ISpecialevents Specialevents { get; private set; }

        /// <summary>
        /// Gets the ISpecialeventschedules.
        /// </summary>
        public virtual ISpecialeventschedules Specialeventschedules { get; private set; }

        /// <summary>
        /// Gets the ISpecialeventtandcs.
        /// </summary>
        public virtual ISpecialeventtandcs Specialeventtandcs { get; private set; }

        /// <summary>
        /// Gets the IStatuscounters.
        /// </summary>
        public virtual IStatuscounters Statuscounters { get; private set; }

        /// <summary>
        /// Gets the ISuitabilities.
        /// </summary>
        public virtual ISuitabilities Suitabilities { get; private set; }

        /// <summary>
        /// Gets the ITaxandaccountings.
        /// </summary>
        public virtual ITaxandaccountings Taxandaccountings { get; private set; }

        /// <summary>
        /// Gets the ITermsconditionslimitationspresets.
        /// </summary>
        public virtual ITermsconditionslimitationspresets Termsconditionslimitationspresets { get; private set; }

        /// <summary>
        /// Gets the ITerritories.
        /// </summary>
        public virtual ITerritories Territories { get; private set; }

        /// <summary>
        /// Gets the ITestentities.
        /// </summary>
        public virtual ITestentities Testentities { get; private set; }

        /// <summary>
        /// Gets the ITiedhouseassociations.
        /// </summary>
        public virtual ITiedhouseassociations Tiedhouseassociations { get; private set; }

        /// <summary>
        /// Gets the ITiedhouseconnections.
        /// </summary>
        public virtual ITiedhouseconnections Tiedhouseconnections { get; private set; }

        /// <summary>
        /// Gets the IViolationtickets.
        /// </summary>
        public virtual IViolationtickets Violationtickets { get; private set; }

        /// <summary>
        /// Gets the IWitnesses.
        /// </summary>
        public virtual IWitnesses Witnesses { get; private set; }

        /// <summary>
        /// Gets the IWorkerinvoicehistories.
        /// </summary>
        public virtual IWorkerinvoicehistories Workerinvoicehistories { get; private set; }

        /// <summary>
        /// Gets the IWorkers.
        /// </summary>
        public virtual IWorkers Workers { get; private set; }

        /// <summary>
        /// Gets the IContacts.
        /// </summary>
        public virtual IContacts Contacts { get; private set; }

        /// <summary>
        /// Gets the IEntitydefinitions.
        /// </summary>
        public virtual IEntitydefinitions Entitydefinitions { get; private set; }

        /// <summary>
        /// Gets the IGlobaloptionsetdefinitions.
        /// </summary>
        public virtual IGlobaloptionsetdefinitions Globaloptionsetdefinitions { get; private set; }

        /// <summary>
        /// Gets the IInvoices.
        /// </summary>
        public virtual IInvoices Invoices { get; private set; }

        /// <summary>
        /// Gets the ILeads.
        /// </summary>
        public virtual ILeads Leads { get; private set; }

        /// <summary>
        /// Gets the ILists.
        /// </summary>
        public virtual ILists Lists { get; private set; }

        /// <summary>
        /// Gets the ISavedqueries.
        /// </summary>
        public virtual ISavedqueries Savedqueries { get; private set; }

        /// <summary>
        /// Gets the ISharepointdocumentlocations.
        /// </summary>
        public virtual ISharepointdocumentlocations Sharepointdocumentlocations { get; private set; }

        /// <summary>
        /// Gets the ISharepointsites.
        /// </summary>
        public virtual ISharepointsites Sharepointsites { get; private set; }

        /// <summary>
        /// Gets the ISystemforms.
        /// </summary>
        public virtual ISystemforms Systemforms { get; private set; }

        /// <summary>
        /// Gets the ISystemusers.
        /// </summary>
        public virtual ISystemusers Systemusers { get; private set; }

        /// <summary>
        /// Gets the IWorkflows.
        /// </summary>
        public virtual IWorkflows Workflows { get; private set; }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        protected DynamicsClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Accounts = new Accounts(this);
            Additionalinspectors = new Additionalinspectors(this);
            Adminactivities = new Adminactivities(this);
            Adoxiolicencetypeadoxioinvestigationset = new Adoxiolicencetypeadoxioinvestigationset(this);
            Aliases = new Aliases(this);
            Annualvolumes = new Annualvolumes(this);
            Applicationbpfdormancies = new Applicationbpfdormancies(this);
            Applicationbpfv3s = new Applicationbpfv3s(this);
            Applicationcrsbpfv4s = new Applicationcrsbpfv4s(this);
            Applicationextensions = new Applicationextensions(this);
            Applicationinvoicehistories = new Applicationinvoicehistories(this);
            Applicationlicenseechangesv10s = new Applicationlicenseechangesv10s(this);
            Applicationliquorbpfv2s = new Applicationliquorbpfv2s(this);
            Applicationrelocationv1s = new Applicationrelocationv1s(this);
            Applications = new Applications(this);
            Applicationstructurechangev1s = new Applicationstructurechangev1s(this);
            Applicationtermsconditionslimitations = new Applicationtermsconditionslimitations(this);
            Applicationtransferownershipv1s = new Applicationtransferownershipv1s(this);
            Applicationtypecontents = new Applicationtypecontents(this);
            Applicationtypefeeschedules = new Applicationtypefeeschedules(this);
            Applicationtypes = new Applicationtypes(this);
            Applicenseechangebpfv2s = new Applicenseechangebpfv2s(this);
            Areas = new Areas(this);
            Assignmenthistories = new Assignmenthistories(this);
            Auctionpermits = new Auctionpermits(this);
            Auctionpermitschedules = new Auctionpermitschedules(this);
            Auditlogrequests = new Auditlogrequests(this);
            Businessaccounts = new Businessaccounts(this);
            Cannabisinventoryreports = new Cannabisinventoryreports(this);
            Cannabismonthlyreports = new Cannabismonthlyreports(this);
            Cannabisproductadmins = new Cannabisproductadmins(this);
            Ceprojects = new Ceprojects(this);
            Citydistricts = new Citydistricts(this);
            Complaints = new Complaints(this);
            Complianceinvestigations = new Complianceinvestigations(this);
            Compliancemeetings = new Compliancemeetings(this);
            Contraventionadmins = new Contraventionadmins(this);
            Contraventions = new Contraventions(this);
            Corporatehistorysummaries = new Corporatehistorysummaries(this);
            Corporateroles = new Corporateroles(this);
            Courthouselocations = new Courthouselocations(this);
            Customautonumberdefinitions = new Customautonumberdefinitions(this);
            Customautonumberrequests = new Customautonumberrequests(this);
            Documentadmins = new Documentadmins(this);
            Documents = new Documents(this);
            Endorsements = new Endorsements(this);
            Enforcementactionbpfs = new Enforcementactionbpfs(this);
            Enforcementactions = new Enforcementactions(this);
            Establishmentincidents = new Establishmentincidents(this);
            Establishments = new Establishments(this);
            Establishmentwatchwords = new Establishmentwatchwords(this);
            Eventaddresses = new Eventaddresses(this);
            Eventlocations = new Eventlocations(this);
            Events = new Events(this);
            Eventschedules = new Eventschedules(this);
            Exhibits = new Exhibits(this);
            Externalcontactadoxioexternalprofileset = new Externalcontactadoxioexternalprofileset(this);
            Externalcontacts = new Externalcontacts(this);
            Externalprofiles = new Externalprofiles(this);
            Federalreportexports = new Federalreportexports(this);
            Fiainvestigationlogs = new Fiainvestigationlogs(this);
            Formelementuploadfields = new Formelementuploadfields(this);
            Fundingsources = new Fundingsources(this);
            Hoursofservices = new Hoursofservices(this);
            Hoursofservicesdefaults = new Hoursofservicesdefaults(this);
            Importedoutstandinginvoiceses = new Importedoutstandinginvoiceses(this);
            Incidentadoxiolicencetypeset = new Incidentadoxiolicencetypeset(this);
            Inspectioninspectorsset = new Inspectioninspectorsset(this);
            Inspectionformconfigurations = new Inspectionformconfigurations(this);
            Inspectionreactivationhistories = new Inspectionreactivationhistories(this);
            Inspectorcommentsrollups = new Inspectorcommentsrollups(this);
            Inspectorreports = new Inspectorreports(this);
            Interests = new Interests(this);
            Investigationactivities = new Investigationactivities(this);
            Investigationcontacts = new Investigationcontacts(this);
            Investigationreactivationhistories = new Investigationreactivationhistories(this);
            Investigationrequests = new Investigationrequests(this);
            Investigations = new Investigations(this);
            Investigationsubjects = new Investigationsubjects(this);
            Ldborders = new Ldborders(this);
            Leconnections = new Leconnections(this);
            Legalentities = new Legalentities(this);
            Licenceldbordertotalhistories = new Licenceldbordertotalhistories(this);
            Licenceses = new Licenceses(this);
            Licencesubcategories = new Licencesubcategories(this);
            Licencetypes = new Licencetypes(this);
            Licencetypesapplicationtypesset = new Licencetypesapplicationtypesset(this);
            Licenseechangelogs = new Licenseechangelogs(this);
            Listadoxioexternalcontactset = new Listadoxioexternalcontactset(this);
            Loans = new Loans(this);
            Localgovindigenousnations = new Localgovindigenousnations(this);
            Logins = new Logins(this);
            Lqrlicencetransferbpfs = new Lqrlicencetransferbpfs(this);
            Offsitestorages = new Offsitestorages(this);
            Onestopmessageitems = new Onestopmessageitems(this);
            Personalhistorysummaries = new Personalhistorysummaries(this);
            Pmuareas = new Pmuareas(this);
            Policejurisdictions = new Policejurisdictions(this);
            Policydocuments = new Policydocuments(this);
            Postalcodes = new Postalcodes(this);
            Previousaddresses = new Previousaddresses(this);
            Proratedlicencefeeschedules = new Proratedlicencefeeschedules(this);
            Regions = new Regions(this);
            Relatedlicences = new Relatedlicences(this);
            Relatedparties = new Relatedparties(this);
            Rmreviews = new Rmreviews(this);
            Sepcities = new Sepcities(this);
            Sepdrinksalesforecasts = new Sepdrinksalesforecasts(this);
            Sepdrinktypes = new Sepdrinktypes(this);
            Sepinvoicehistories = new Sepinvoicehistories(this);
            Serviceareas = new Serviceareas(this);
            Settings = new Settings(this);
            Spddatarows = new Spddatarows(this);
            Spdexportses = new Spdexportses(this);
            Specialeventlicencedareas = new Specialeventlicencedareas(this);
            Specialeventlocations = new Specialeventlocations(this);
            Specialeventnotes = new Specialeventnotes(this);
            Specialevents = new Specialevents(this);
            Specialeventschedules = new Specialeventschedules(this);
            Specialeventtandcs = new Specialeventtandcs(this);
            Statuscounters = new Statuscounters(this);
            Suitabilities = new Suitabilities(this);
            Taxandaccountings = new Taxandaccountings(this);
            Termsconditionslimitationspresets = new Termsconditionslimitationspresets(this);
            Territories = new Territories(this);
            Testentities = new Testentities(this);
            Tiedhouseassociations = new Tiedhouseassociations(this);
            Tiedhouseconnections = new Tiedhouseconnections(this);
            Violationtickets = new Violationtickets(this);
            Witnesses = new Witnesses(this);
            Workerinvoicehistories = new Workerinvoicehistories(this);
            Workers = new Workers(this);
            Contacts = new Contacts(this);
            Entitydefinitions = new Entitydefinitions(this);
            Globaloptionsetdefinitions = new Globaloptionsetdefinitions(this);
            Invoices = new Invoices(this);
            Leads = new Leads(this);
            Lists = new Lists(this);
            Savedqueries = new Savedqueries(this);
            Sharepointdocumentlocations = new Sharepointdocumentlocations(this);
            Sharepointsites = new Sharepointsites(this);
            Systemforms = new Systemforms(this);
            Systemusers = new Systemusers(this);
            Workflows = new Workflows(this);
            BaseUri = new System.Uri("http://localhost");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
